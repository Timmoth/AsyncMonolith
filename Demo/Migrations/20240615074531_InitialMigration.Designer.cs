// <auto-generated />
using Demo;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Demo.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240615074531_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AsyncMonolith.Consumers.ConsumerMessage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<int>("Attempts")
                        .HasColumnType("integer")
                        .HasColumnName("attempts")
                        .HasAnnotation("Relational:JsonPropertyName", "attempts");

                    b.Property<long>("AvailableAfter")
                        .HasColumnType("bigint")
                        .HasColumnName("available_after")
                        .HasAnnotation("Relational:JsonPropertyName", "available_after");

                    b.Property<string>("ConsumerType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("consumer_type")
                        .HasAnnotation("Relational:JsonPropertyName", "consumer_type");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<string>("InsertId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("insert_id")
                        .HasAnnotation("Relational:JsonPropertyName", "insert_id");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payload")
                        .HasAnnotation("Relational:JsonPropertyName", "payload");

                    b.Property<string>("PayloadType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payload_type")
                        .HasAnnotation("Relational:JsonPropertyName", "payload_type");

                    b.HasKey("Id");

                    b.HasIndex("InsertId", "ConsumerType")
                        .IsUnique();

                    b.ToTable("consumer_messages");
                });

            modelBuilder.Entity("AsyncMonolith.Consumers.PoisonedMessage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<int>("Attempts")
                        .HasColumnType("integer")
                        .HasColumnName("attempts")
                        .HasAnnotation("Relational:JsonPropertyName", "attempts");

                    b.Property<long>("AvailableAfter")
                        .HasColumnType("bigint")
                        .HasColumnName("available_after")
                        .HasAnnotation("Relational:JsonPropertyName", "available_after");

                    b.Property<string>("ConsumerType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("consumer_type")
                        .HasAnnotation("Relational:JsonPropertyName", "consumer_type");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<string>("InsertId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("insert_id")
                        .HasAnnotation("Relational:JsonPropertyName", "insert_id");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payload")
                        .HasAnnotation("Relational:JsonPropertyName", "payload");

                    b.Property<string>("PayloadType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payload_type")
                        .HasAnnotation("Relational:JsonPropertyName", "payload_type");

                    b.HasKey("Id");

                    b.ToTable("poisoned_messages");
                });

            modelBuilder.Entity("AsyncMonolith.Scheduling.ScheduledMessage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<long>("AvailableAfter")
                        .HasColumnType("bigint")
                        .HasColumnName("available_after")
                        .HasAnnotation("Relational:JsonPropertyName", "available_after");

                    b.Property<string>("ChronExpression")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("chron_expression")
                        .HasAnnotation("Relational:JsonPropertyName", "chron_expression");

                    b.Property<string>("ChronTimezone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("chron_timezone")
                        .HasAnnotation("Relational:JsonPropertyName", "chron_timezone");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payload")
                        .HasAnnotation("Relational:JsonPropertyName", "payload");

                    b.Property<string>("PayloadType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payload_type")
                        .HasAnnotation("Relational:JsonPropertyName", "payload_type");

                    b.Property<string>("Tag")
                        .HasColumnType("text")
                        .HasColumnName("tag")
                        .HasAnnotation("Relational:JsonPropertyName", "tag");

                    b.HasKey("Id");

                    b.ToTable("scheduled_messages");
                });

            modelBuilder.Entity("Demo.Spam.SubmittedValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Value")
                        .HasColumnType("double precision")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.ToTable("submitted_values");
                });
#pragma warning restore 612, 618
        }
    }
}
